// Script de Teste para o M√≥dulo de Seguran√ßa ADLN Broker
// Execute este script no console do navegador para testar as funcionalidades

(function() {
    'use strict';

    console.log('üîí Iniciando testes do m√≥dulo de seguran√ßa...');

    // Fun√ß√£o para criar dados de teste
    function createTestData() {
        const testUsers = {
            '123.456.789-00': {
                nome: 'Usu√°rio Teste',
                email: 'teste@adln.com',
                senha: 'Teste123'
            }
        };
        
        localStorage.setItem('adln_usuarios', JSON.stringify(testUsers));
        console.log('‚úÖ Dados de teste criados');
    }

    // Fun√ß√£o para testar autentica√ß√£o
    function testAuthentication() {
        console.log('\nüß™ Testando autentica√ß√£o...');
        
        // Teste 1: Usu√°rio n√£o logado
        console.log('Teste 1 - Usu√°rio n√£o logado:');
        console.log('ADLNAuth.isLoggedIn():', window.ADLNAuth ? window.ADLNAuth.isLoggedIn() : 'M√≥dulo n√£o encontrado');
        
        // Teste 2: Login bem-sucedido
        console.log('\nTeste 2 - Login bem-sucedido:');
        if (window.ADLNAuth && window.ADLNAuth.login) {
            const loginResult = window.ADLNAuth.login('123.456.789-00', 'Teste123');
            console.log('Login resultado:', loginResult);
            console.log('ADLNAuth.isLoggedIn():', window.ADLNAuth.isLoggedIn());
        }
        
        // Teste 3: Login falhado
        console.log('\nTeste 3 - Login falhado:');
        if (window.ADLNAuth && window.ADLNAuth.login) {
            const loginResult = window.ADLNAuth.login('123.456.789-00', 'SenhaErrada');
            console.log('Login resultado:', loginResult);
        }
    }

    // Fun√ß√£o para testar m√≥dulo de seguran√ßa
    function testSecurityModule() {
        console.log('\nüõ°Ô∏è Testando m√≥dulo de seguran√ßa...');
        
        if (!window.ADLNSecurity) {
            console.log('‚ùå M√≥dulo de seguran√ßa n√£o encontrado');
            return;
        }
        
        // Teste 1: Verificar se est√° autenticado
        console.log('Teste 1 - Status de autentica√ß√£o:');
        console.log('ADLNSecurity.isAuthenticated():', window.ADLNSecurity.isAuthenticated());
        
        // Teste 2: Verificar se a sess√£o √© v√°lida
        console.log('\nTeste 2 - Validade da sess√£o:');
        console.log('ADLNSecurity.isSessionValid():', window.ADLNSecurity.isSessionValid());
        
        // Teste 3: Verificar se est√° bloqueado
        console.log('\nTeste 3 - Status de bloqueio:');
        console.log('ADLNSecurity.isBlocked():', window.ADLNSecurity.isBlocked());
        
        // Teste 4: Simular tentativas de login
        console.log('\nTeste 4 - Simulando tentativas de login:');
        for (let i = 1; i <= 4; i++) {
            window.ADLNSecurity.recordLoginAttempt(false);
            console.log(`Tentativa ${i}: Bloqueado = ${window.ADLNSecurity.isBlocked()}`);
        }
        
        // Teste 5: Reset com login bem-sucedido
        console.log('\nTeste 5 - Reset com login bem-sucedido:');
        window.ADLNSecurity.recordLoginAttempt(true);
        console.log('Bloqueado ap√≥s reset:', window.ADLNSecurity.isBlocked());
    }

    // Fun√ß√£o para testar prote√ß√£o de p√°ginas
    function testPageProtection() {
        console.log('\nüìÑ Testando prote√ß√£o de p√°ginas...');
        
        if (!window.ADLNSecurity) {
            console.log('‚ùå M√≥dulo de seguran√ßa n√£o encontrado');
            return;
        }
        
        // Simular estar em p√°gina protegida
        const originalPathname = window.location.pathname;
        Object.defineProperty(window.location, 'pathname', {
            value: '/dashboard.html',
            writable: true
        });
        
        console.log('Simulando acesso a p√°gina protegida...');
        console.log('ADLNSecurity.performCheck():', window.ADLNSecurity.performCheck());
        
        // Restaurar pathname original
        Object.defineProperty(window.location, 'pathname', {
            value: originalPathname,
            writable: true
        });
    }

    // Fun√ß√£o para testar monitoramento de atividade
    function testActivityMonitoring() {
        console.log('\nüñ±Ô∏è Testando monitoramento de atividade...');
        
        if (!window.ADLNSecurity) {
            console.log('‚ùå M√≥dulo de seguran√ßa n√£o encontrado');
            return;
        }
        
        console.log('Simulando atividade do usu√°rio...');
        window.ADLNSecurity.updateActivity();
        console.log('Atividade registrada');
        
        // Verificar se o monitoramento est√° ativo
        console.log('Monitoramento ativo:', window.ADLNSecurity.securityCheckInterval !== null);
    }

    // Fun√ß√£o para testar logout
    function testLogout() {
        console.log('\nüö™ Testando logout...');
        
        if (window.ADLNAuth && window.ADLNAuth.logout) {
            console.log('Executando logout...');
            // N√£o executar realmente para n√£o redirecionar
            console.log('Logout simulado - fun√ß√£o dispon√≠vel');
        } else {
            console.log('‚ùå Fun√ß√£o de logout n√£o encontrada');
        }
    }

    // Fun√ß√£o para limpar dados de teste
    function cleanupTestData() {
        console.log('\nüßπ Limpando dados de teste...');
        localStorage.removeItem('adln_usuarios');
        localStorage.removeItem('adln_usuario_atual');
        localStorage.removeItem('adln_session_start');
        localStorage.removeItem('adln_last_activity');
        console.log('‚úÖ Dados de teste removidos');
    }

    // Fun√ß√£o principal de teste
    function runAllTests() {
        console.log('üöÄ Iniciando suite de testes completa...\n');
        
        try {
            // Preparar dados de teste
            createTestData();
            
            // Executar testes
            testAuthentication();
            testSecurityModule();
            testPageProtection();
            testActivityMonitoring();
            testLogout();
            
            console.log('\n‚úÖ Todos os testes conclu√≠dos!');
            
        } catch (error) {
            console.error('‚ùå Erro durante os testes:', error);
        } finally {
            // Limpar dados de teste
            cleanupTestData();
        }
    }

    // Fun√ß√£o para mostrar status atual
    function showCurrentStatus() {
        console.log('\nüìä Status atual do sistema:');
        console.log('URL atual:', window.location.href);
        console.log('M√≥dulo ADLNAuth dispon√≠vel:', !!window.ADLNAuth);
        console.log('M√≥dulo ADLNSecurity dispon√≠vel:', !!window.ADLNSecurity);
        
        if (window.ADLNAuth) {
            console.log('Usu√°rio logado:', window.ADLNAuth.isLoggedIn());
        }
        
        if (window.ADLNSecurity) {
            console.log('Autenticado:', window.ADLNSecurity.isAuthenticated());
            console.log('Sess√£o v√°lida:', window.ADLNSecurity.isSessionValid());
            console.log('Bloqueado:', window.ADLNSecurity.isBlocked());
        }
    }

    // Expor fun√ß√µes globalmente para uso no console
    window.SecurityTest = {
        runAllTests: runAllTests,
        showStatus: showCurrentStatus,
        testAuth: testAuthentication,
        testSecurity: testSecurityModule,
        testPages: testPageProtection,
        testActivity: testActivityMonitoring,
        testLogout: testLogout,
        cleanup: cleanupTestData
    };

    // Executar status inicial
    showCurrentStatus();
    
    console.log('\nüîß Fun√ß√µes de teste dispon√≠veis:');
    console.log('- SecurityTest.runAllTests() - Executar todos os testes');
    console.log('- SecurityTest.showStatus() - Mostrar status atual');
    console.log('- SecurityTest.testAuth() - Testar autentica√ß√£o');
    console.log('- SecurityTest.testSecurity() - Testar m√≥dulo de seguran√ßa');
    console.log('- SecurityTest.testPages() - Testar prote√ß√£o de p√°ginas');
    console.log('- SecurityTest.testActivity() - Testar monitoramento');
    console.log('- SecurityTest.testLogout() - Testar logout');
    console.log('- SecurityTest.cleanup() - Limpar dados de teste');

})();
